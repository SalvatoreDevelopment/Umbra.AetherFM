<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net9.0-windows</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <LangVersion>latest</LangVersion>

    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <ProduceReferenceAssembly>false</ProduceReferenceAssembly>
    <Configuration Condition="'$(Configuration)' == ''">Release</Configuration>

    <!-- Local runtime paths - only used for local development -->
    <DalamudLibPath>$(APPDATA)\XIVLauncher\addon\Hooks\dev\</DalamudLibPath>
    <!-- Pick the first installed Umbra version directory -->
    <UmbraLibBase>$(APPDATA)\XIVLauncher\installedPlugins\Umbra\</UmbraLibBase>
    <UmbraLibPath Condition="Exists('$(UmbraLibBase)')">$([System.IO.Directory]::GetDirectories('$(UmbraLibBase)')[0])\</UmbraLibPath>
    <UmbraLibPath Condition="!Exists('$(UmbraLibBase)')">$(MSBuildProjectDirectory)\lib\</UmbraLibPath>

    <OutputPath>$(MSBuildProjectDirectory)\bin\$(Configuration)\</OutputPath>
  </PropertyGroup>

  <ItemGroup>
    <!-- Umbra core - only include if local installation exists or lib folder exists -->
    <Reference Include="Umbra" Condition="Exists('$(UmbraLibPath)Umbra.dll')">
      <HintPath>$(UmbraLibPath)Umbra.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="Umbra.Common" Condition="Exists('$(UmbraLibPath)Umbra.Common.dll')">
      <HintPath>$(UmbraLibPath)Umbra.Common.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <!-- Una drawing (needed for Node/UI primitives) -->
    <Reference Include="Una.Drawing" Condition="Exists('$(UmbraLibPath)Una.Drawing.dll')">
      <HintPath>$(UmbraLibPath)Una.Drawing.dll</HintPath>
      <Private>false</Private>
    </Reference>

    <!-- Dalamud + structs - only include if local installation exists or lib folder exists -->
    <Reference Include="Dalamud" Condition="Exists('$(DalamudLibPath)Dalamud.dll')">
      <HintPath>$(DalamudLibPath)Dalamud.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="Dalamud" Condition="!Exists('$(DalamudLibPath)Dalamud.dll') And Exists('$(MSBuildProjectDirectory)\lib\Dalamud.dll')">
      <HintPath>$(MSBuildProjectDirectory)\lib\Dalamud.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="FFXIVClientStructs" Condition="Exists('$(DalamudLibPath)FFXIVClientStructs.dll')">
      <HintPath>$(DalamudLibPath)FFXIVClientStructs.dll</HintPath>
      <Private>false</Private>
    </Reference>
    <Reference Include="FFXIVClientStructs" Condition="!Exists('$(DalamudLibPath)FFXIVClientStructs.dll') And Exists('$(MSBuildProjectDirectory)\lib\FFXIVClientStructs.dll')">
      <HintPath>$(MSBuildProjectDirectory)\lib\FFXIVClientStructs.dll</HintPath>
      <Private>false</Private>
    </Reference>
  </ItemGroup>

  <!-- Copy output ready for Umbra Add plugin -->
  <Target Name="PostBuild" AfterTargets="Build">
    <Message Text="=== PostBuild Target Started ===" Importance="high" />
    <Message Text="MSBuildProjectDirectory: $(MSBuildProjectDirectory)" Importance="high" />
    <Message Text="OutputPath: $(OutputPath)" Importance="high" />
    <Message Text="Configuration: $(Configuration)" Importance="high" />
    <Message Text="Current Directory: $(MSBuildThisFileDirectory)" Importance="high" />
    
    <MakeDir Directories="$(MSBuildProjectDirectory)\out\Release" />
    <Message Text="Directory created: $(MSBuildProjectDirectory)\out\Release" Importance="high" />
    
    <Copy SourceFiles="$(OutputPath)Umbra.AetherFM.dll" DestinationFolder="$(MSBuildProjectDirectory)\out\Release" />
    <Message Text="DLL copied successfully" Importance="high" />
    
    <Copy SourceFiles="$(OutputPath)Umbra.AetherFM.pdb" DestinationFolder="$(MSBuildProjectDirectory)\out\Release" Condition="Exists('$(OutputPath)Umbra.AetherFM.pdb')" />
    <Message Text="PDB copied successfully" Importance="high" />
    
    <Message Text="=== PostBuild Target Completed ===" Importance="high" />
  </Target>
</Project>


